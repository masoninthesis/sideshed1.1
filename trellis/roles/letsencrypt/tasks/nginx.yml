- name: Check for existing certificates
  stat:
    path: "{{ letsencrypt_certs_dir }}/{{ item.key }}.cert"
  register: letsencrypt_existing_certs
  when: site_uses_letsencrypt
  with_dict: "{{ wordpress_sites }}"

- name: Create Nginx sites for challenges
  template:
    src: nginx-challenge-site.conf.j2
    dest: "{{ nginx_path }}/sites-available/letsencrypt-{{ item.item.key }}.conf"
  when: not item | skipped and not item.stat.exists
  with_items: "{{ letsencrypt_existing_certs.results }}"

- name: Enable Nginx site
  file:
    src: "{{ nginx_path }}/sites-available/letsencrypt-{{ item.item.key }}.conf"
    dest: "{{ nginx_path }}/sites-enabled/letsencrypt-{{ item.item.key }}.conf"
    state: link
  when: not item | skipped and not item.stat.exists
  with_items: "{{ letsencrypt_existing_certs.results }}"

- name: Trigger nginx reload
  service:
    name: nginx
    state: reloaded
  changed_when: false

- name: Create test Acme Challenge file
  shell: touch {{ acme_tiny_challenges_directory }}/ping.txt
  args:
    creates: "{{ acme_tiny_challenges_directory }}/ping.txt"
    warn: false

- name: Test Acme Challenges
  test_challenges:
    hosts: "{{ item.value.site_hosts | reverse_www(enabled=item.value.www_redirect | default(true)) }}"
  register: letsencrypt_test_challenges
  ignore_errors: true
  when: site_uses_letsencrypt
  with_dict: "{{ wordpress_sites }}"

- name: Notify of challenge failures
  fail:
    msg: >
      Could not access the challenge file for the hosts/domains: {{ item.failed_hosts | join(', ') }}.
      Let's Encrypt requires every domain/host be publicly accessible.
      Make sure that a valid DNS record exists for {{ item.failed_hosts | join(', ') }} and that they point to this server's IP.
      If you don't want these domains in your SSL certificate, then remove them from `site_hosts`.
      See https://roots.io/trellis/docs/ssl for more details.
  when: not item | skipped and letsencrypt_test_challenges | failed
  with_items: "{{ letsencrypt_test_challenges.results }}"
